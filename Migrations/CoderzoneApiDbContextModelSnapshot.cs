// <auto-generated />
using System;
using CoderzoneGrapQLAPI.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoderzoneGrapQLAPI.Migrations
{
    [DbContext(typeof(CoderzoneApiDbContext))]
    partial class CoderzoneApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DatePublished");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Number");

                    b.Property<Guid>("ProgrammerId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammerId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Programmer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<Guid?>("StateId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Programmers");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Qualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid?>("ProfileId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<Guid?>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PostCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid?>("ProfileId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Profile", b =>
                {
                    b.HasOne("CoderzoneGrapQLAPI.Models.Programmer", "Programmer")
                        .WithOne("Profile")
                        .HasForeignKey("CoderzoneGrapQLAPI.Models.Profile", "ProgrammerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Programmer", b =>
                {
                    b.HasOne("CoderzoneGrapQLAPI.Models.Country", "Country")
                        .WithMany("Programmers")
                        .HasForeignKey("CountryId");

                    b.HasOne("CoderzoneGrapQLAPI.Models.State", "State")
                        .WithMany("Programmer")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Project", b =>
                {
                    b.HasOne("CoderzoneGrapQLAPI.Models.Profile", "Profile")
                        .WithMany("Projects")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Qualification", b =>
                {
                    b.HasOne("CoderzoneGrapQLAPI.Models.Profile", "Profile")
                        .WithMany("Qualifications")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.Skill", b =>
                {
                    b.HasOne("CoderzoneGrapQLAPI.Models.Profile", "Profile")
                        .WithMany("Skills")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.State", b =>
                {
                    b.HasOne("CoderzoneGrapQLAPI.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("CoderzoneGrapQLAPI.Models.WorkExperience", b =>
                {
                    b.HasOne("CoderzoneGrapQLAPI.Models.Profile", "Profile")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ProfileId");
                });
#pragma warning restore 612, 618
        }
    }
}
